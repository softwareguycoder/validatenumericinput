     1                                  ;   Executable name         : validatenumericinput
     2                                  ;   Version                 : 1.0
     3                                  ;   Created date            : 03/13/2019
     4                                  ;   Last update             : 03/13/2019
     5                                  ;   Author                  : Brian Hart
     6                                  ;   Description             : A simple program to test a procedure that validates the user's input.  The procedure
     7                                  ;                             checks the text the user has typed to ensure that it's parsable into a positive or
     8                                  ;                             negative whole number or zero; if not, then the procedure kills the program gracefully
     9                                  ;                             after telling the user their input is invalid.
    10                                  ;                             
    11                                  ;
    12                                  ;   Run it this way:
    13                                  ;       ./validatenumericinput
    14                                  ;
    15                                  ;   Build using these commands:
    16                                  ;       nasm -f elf -F dwarf -g validatenumericinput.asm -l validatenumericinput.lst
    17                                  ;       ld -m elf_i386 -o validatenumericinput validatenumericinput.o
    18                                  ;
    19                                  SECTION     .bss                    ; Section contaning uninitialized data
    20                                  
    21                                      INPUTLEN equ 1024               ; Length of buffer to store user input
    22 00000000 <res 00000400>              INPUT:   resb INPUTLEN          ; Text buffer itself to store user input
    23                                      
    24                                  SECTION     .data                   ; Section containing initialized data
    25                                  
    26                                      SYS_WRITE   EQU 4               ; Code for the sys_write syscall
    27                                      SYS_READ    EQU 3               ; Code for the sys_read syscall
    28                                      SYS_EXIT    EQU 1               ; Code for the sys_exit syscall
    29                                      
    30                                      STDIN       EQU 0               ; Standard File Descriptor 0: Standard Input
    31                                      STDOUT      EQU 1               ; Standard File Descriptor 1: Standard Output
    32                                      STDERR      EQU 2               ; Standard File Descriptor 2: Standard Error
    33                                      
    34                                      EXIT_OK     EQU 0               ; Process exit code for successful termination
    35                                      EXIT_ERR    EQU -1              ; Process exit code for a general error condition
    36                                  
    37                                  ; Message to welcome the user to the program
    38 00000000 76616C69646174656E-         WELCOMEMSG db "validatenumericinput v1.0 by Brian Hart",10,0
    38 00000009 756D65726963696E70-
    38 00000012 75742076312E302062-
    38 0000001B 7920427269616E2048-
    38 00000024 6172740A00         
    39 00000029 0A00                                   db 10,0
    40 0000002B 546869732070726F67-                    db "This program tests the ValidateNumericInput procedure.  This procedure",10,0
    40 00000034 72616D207465737473-
    40 0000003D 207468652056616C69-
    40 00000046 646174654E756D6572-
    40 0000004F 6963496E7075742070-
    40 00000058 726F6365647572652E-
    40 00000061 202054686973207072-
    40 0000006A 6F6365647572650A00 
    41 00000073 74616B657320612074-                    db "takes a text string as input and attempts to validate whether it can be",10,0
    41 0000007C 65787420737472696E-
    41 00000085 6720617320696E7075-
    41 0000008E 7420616E6420617474-
    41 00000097 656D70747320746F20-
    41 000000A0 76616C696461746520-
    41 000000A9 776865746865722069-
    41 000000B2 742063616E2062650A-
    41 000000BB 00                 
    42 000000BC 737563636573736675-                    db "successfully parsed as being the string representation of an integer.",10,0
    42 000000C5 6C6C79207061727365-
    42 000000CE 64206173206265696E-
    42 000000D7 672074686520737472-
    42 000000E0 696E67207265707265-
    42 000000E9 73656E746174696F6E-
    42 000000F2 206F6620616E20696E-
    42 000000FB 74656765722E0A00   
    43 00000103 417320776520616C6C-                    db "As we all know from math class, an integer is defined as a positive or",10,0
    43 0000010C 206B6E6F772066726F-
    43 00000115 6D206D61746820636C-
    43 0000011E 6173732C20616E2069-
    43 00000127 6E7465676572206973-
    43 00000130 20646566696E656420-
    43 00000139 6173206120706F7369-
    43 00000142 74697665206F720A00 
    44 0000014B 6E6567617469766520-                    db "negative whole number or zero.  If invalid input is typed, the program will",10,0
    44 00000154 77686F6C65206E756D-
    44 0000015D 626572206F72207A65-
    44 00000166 726F2E202049662069-
    44 0000016F 6E76616C696420696E-
    44 00000178 707574206973207479-
    44 00000181 7065642C2074686520-
    44 0000018A 70726F6772616D2077-
    44 00000193 696C6C0A00         
    45 00000198 6469652E20204F7468-                    db "die.  Otherwise, nothing else happens and control is returned to the main thread.",10,0
    45 000001A1 6572776973652C206E-
    45 000001AA 6F7468696E6720656C-
    45 000001B3 73652068617070656E-
    45 000001BC 7320616E6420636F6E-
    45 000001C5 74726F6C2069732072-
    45 000001CE 657475726E65642074-
    45 000001D7 6F20746865206D6169-
    45 000001E0 6E207468726561642E-
    45 000001E9 0A00               
    46 000001EB 0A00                                   db 10,0
    47                                      WELCOMEMSGLEN EQU $-WELCOMEMSG
    48                                      
    49                                  ; Prompt for the user to type an integer
    50 000001ED 3E20506C6561736520-         USERPROMPT1 db "> Please type an integer: > ",0
    50 000001F6 7479706520616E2069-
    50 000001FF 6E74656765723A203E-
    50 00000208 2000               
    51                                      USERPROMPT1LEN EQU $-USERPROMPT1                  
    52                                                 
    53                                  ; Message to the user to tell them the value typed is not acceptable.
    54                                  ; Customize this to your liking.
    55 0000020A 4552524F522120496E-         INVALIDVAL: db "ERROR! Invalid value.",10,0  
    55 00000213 76616C69642076616C-
    55 0000021C 75652E0A00         
    56                                      INVALIDVALLEN equ $-INVALIDVAL   
    57                                      
    58 00000221 50726F6772616D2065-         DONEMSG: db "Program executed successfully.",10,0
    58 0000022A 786563757465642073-
    58 00000233 75636365737366756C-
    58 0000023C 6C792E0A00         
    59                                      DONEMSGLEN EQU $-DONEMSG            
    60                                      
    61 00000241 0A00                        LF: db 10,0
    62                                      LFLEN EQU $-LF
    63                                      
    64                                  SECTION .text                       ; Section containing the program's code
    65                                  
    66                                  ;------------------------------------------------------------------------------
    67                                  ; DisplayText:          Displays a text string on the STDOUT
    68                                  ; UPDATED:              03/12/2019
    69                                  ; IN:                   ECX = Address of the start of the output buffer
    70                                  ;                       EDX = Count of characters to be displayed
    71                                  ; RETURNS:              Nothing
    72                                  ; MODIFIED:             Nothing
    73                                  ; CALLS:                sys_write via INT 80h
    74                                  ; DESCRIPTION:          Writes whatever text is referenced by ECX and EDX to the
    75                                  ;                       STDOUT.  By default, writing to STDOUT causes text to be
    76                                  ;                       displayed on the user's console.
    77                                  ;
    78                                  DisplayText:
    79 00000000 50                          push eax                        ; Save caller's EAX
    80 00000001 53                          push ebx                        ; Save caller's EBX
    81 00000002 B804000000                  mov eax, SYS_WRITE              ; Specify sys_write syscall
    82 00000007 BB01000000                  mov ebX, STDOUT                 ; Specify File Descriptor 1: Standard Output
    83 0000000C CD80                        int 80h                         ; Make kernel call; assume ECX and EDX already initialized
    84 0000000E 5B                          pop ebx                         ; Restore caller's EBX
    85 0000000F 58                          pop eax                         ; Restore caller's EAX
    86 00000010 C3                          ret                             ; Return to caller
    87                                      
    88                                  ;------------------------------------------------------------------------------
    89                                  ; GetText:              Reads in text from user input
    90                                  ; UPDATED:              03/12/2019
    91                                  ; IN:                   ECX = Address of the start of the output buffer
    92                                  ;                       EDX = Count of characters to be displayed
    93                                  ; RETURNS:              Nothing
    94                                  ; MODIFIED:             EAX contains number of bytes read (including carriage return)
    95                                  ; CALLS:                sys_write via INT 80h
    96                                  ; DESCRIPTION:          Reads user input from screen into a buffer
    97                                  ;
    98                                  GetText:
    99 00000011 53                          push ebx                        ; Save caller's EBX
   100 00000012 B803000000                  mov eax, SYS_READ               ; Specify sys_read syscall
   101 00000017 BB00000000                  mov ebX, STDIN                  ; Specify File Descriptor 0: Standard Input
   102 0000001C CD80                        int 80h                         ; Make kernel call; assume ECX and EDX already initialized
   103 0000001E 5B                          pop ebx                         ; Restore caller's EBX
   104 0000001F C3                          ret                             ; Return to caller
   105                                      
   106                                  ;------------------------------------------------------------------------------
   107                                  ; ExitProgram           Exits this program properly and returns control to the OS
   108                                  ; UPDATED:              03/13/2019
   109                                  ; IN:                   EBX = Numeric exit code of the program. Usually, zero means
   110                                  ;                       success, but it's arbitrary.
   111                                  ; RETURNS:              Nothing.  The program has terminated by the time this procedure
   112                                  ;                       is finished.  Calling this procedure is the kiss of death.
   113                                  ; MODIFIED:             EAX contains the code for the sys_exit syscall
   114                                  ; CALLS:                sys_exit via INT 80h
   115                                  ; DESCRIPTION:          Exits the program and returns control to the OS
   116                                  ;
   117                                  ExitProgram:
   118 00000020 B801000000                  mov eax, SYS_EXIT               ; Specify the sys_exit syscall
   119 00000025 CD80                        int 80h                         ; Make kernel call
   120 00000027 C3                          ret
   121                                  
   122                                  GLOBAL _start                       ; Tell the linker where the program's entry point is
   123                                  
   124                                  _start:                             ; This label is the program's entry point
   125 00000028 90                          nop                             ; Keeps gdb happy
   126                                      
   127 00000029 B9[00000000]                mov ecx, WELCOMEMSG             ; Address of the welcome message
   128 0000002E BAED010000                  mov edx, WELCOMEMSGLEN          ; Length of the welcome message
   129 00000033 E8C8FFFFFF                  call DisplayText                ; Display the welcome message to the user
   130                                      
   131 00000038 B9[ED010000]                mov ecx, USERPROMPT1            ; Prompt for the user to enter an integer
   132 0000003D BA1D000000                  mov edx, USERPROMPT1LEN         ; Length of the user prompt message
   133 00000042 E8B9FFFFFF                  call DisplayText                ; Display the prompt to the user
   134                                      
   135 00000047 B9[00000000]                mov ecx, INPUT                  ; Input buffer for the user's input
   136 0000004C BA00040000                  mov edx, INPUTLEN               ; Length of the input buffer
   137 00000051 E8BBFFFFFF                  call GetText                    ; Gets the input from the user
   138                                      
   139                                      ; TODO: Add new program code here
   140 00000056 90                          nop                             ; Keeps gdb happy
   141                                      
   142 00000057 B9[41020000]                mov ecx, LF                     ; A linefeed character
   143 0000005C BA02000000                  mov edx, LFLEN                  ; Length of the message to display
   144 00000061 E89AFFFFFF                  call DisplayText                ; Display the newline to the user
   145                                      
   146 00000066 B9[21020000]                mov ecx, DONEMSG                ; Address of the "program finished successfully" message
   147 0000006B BA20000000                  mov edx, DONEMSGLEN             ; Length of the message to display to the user
   148 00000070 E88BFFFFFF                  call DisplayText                ; Display the message to the user.
   149                                      
   150 00000075 BB00000000                  mov ebx, EXIT_OK                ; Specify EXIT_OK code for successful completion
   151 0000007A E8A1FFFFFF                  call ExitProgram                ; Exit the software gracefully
